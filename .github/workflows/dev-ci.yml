name: Dev Tests

on:
  push:
    branches:
      - "*"
      - "!staging"
      - "!master"
    paths:
      - '**.php'
      - 'composer.json'
      - 'Dockerfile'
      - 'entrypoint.sh'
      - '.github/workflows/dev-ci.yml'
  pull_request:
    branches:
      - "staging"
      - "master"
    paths:
      - '**.php'
      - 'composer.json'
      - 'Dockerfile'
      - 'entrypoint.sh'
      - '.github/workflows/dev-ci.yml'
    types: [ opened, synchronize, reopened, labeled ]

env:
  # Deployment variables
  PROJECT_NAME: becas-portal
  GAR_BASE: us-docker.pkg.dev/${{ secrets.GCP_PROJECT }}
  # Application variables
  APP_NAME: ${{ secrets.APP_NAME }}
  APP_KEY: ${{ secrets.APP_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      ### Build the Docker image and Push it
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.GITHUB_HEAD_REF_SLUG }}-${{ env.GITHUB_SHA_SHORT }}

      - name: Login to GAR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GAR_BASE}}
          username: _json_key
          password: ${{ secrets.GAR_JSON_KEY }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          target: test
          tags: ${{ env.GAR_BASE }}/${{env.PROJECT_NAME}}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_REF_SLUG }}
          build-args: |
            APP_NAME=${{ secrets.APP_NAME }}
            APP_KEY=${{ secrets.APP_KEY }}
            APP_URL=${{ secrets.APP_URL }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            GOOGLE_CLOUD_PROJECT_ID=${{ secrets.GCP_PROJECT }}
          push: true
          cache-from: type=registry,ref=${{ env.GAR_BASE }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG }}
          cache-to: type=inline

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  test:
    needs: ["build"]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      APP_URL: ${{ secrets.APP_URL }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
      GOOGLE_CLOUD_KEY_FILE: ${{ secrets.GAR_JSON_KEY }}
      GOOGLE_CLOUD_STORAGE_BUCKET: ${{ secrets.GCP_BUCKET }}

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        php: ['7.4']

    steps:
      - uses: rlespinasse/github-slug-action@v3.x

      - name: Login to GAR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GAR_BASE}}
          username: _json_key
          password: ${{ secrets.GAR_JSON_KEY }}

      - name: Run Odoo tests
        run: |
          docker pull ${{ env.GAR_BASE }}/${{env.PROJECT_NAME}}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG }}
          docker run -e RUN_TESTS -e LOG_LEVEL -e EXTRA_MODULES -e PGHOST --network="host" --name odoo -t ${{ env.GAR_BASE }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG }}
        env:
          APP_URL: http://localhost
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: root
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
          GOOGLE_CLOUD_KEY_FILE: ${{ secrets.GAR_JSON_KEY }}
          GOOGLE_CLOUD_STORAGE_BUCKET: ${{ secrets.GCP_BUCKET }}

      - uses: actions/checkout@v2
      - uses: php-actions/composer@v5

      - name: Execute tests
        continue-on-error: ${{ matrix.php > 8 }}
        run: vendor/bin/phpunit --verbose
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          DB_USERNAME: root

      - name: Use PHP ${{ matrix.php }} for tests
        uses: php-actions/phpunit@v3
        continue-on-error: ${{ matrix.php > 8 }}
        with:
          php_version: ${{ matrix.php }}
          configuration: ./phpunit.xml

  deploy:
    needs: ["build"]
    runs-on: ubuntu-latest
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - id: deploy
        uses: google-github-actions/deploy-cloudrun@main
        with:
          image: ${{ env.GAR_BASE}}/${{env.PROJECT_NAME}}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_REF_SLUG }}
          service: ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}-${{ env.GITHUB_REF_SLUG }}
          credentials: ${{ secrets.GAR_JSON_KEY }}
          region: ${{ secrets.GCP_REGION }}
          env_vars: |
            APP_NAME=${{ secrets.APP_NAME }},
            APP_KEY=${{ secrets.APP_KEY }},
            APP_URL=${{ secrets.APP_URL }},
            DB_HOST=${{ secrets.DB_HOST }},
            DB_PORT=${{ secrets.DB_PORT }},
            DB_DATABASE=${{ secrets.DB_DATABASE }},
            DB_USERNAME=${{ secrets.DB_USERNAME }},
            DB_PASSWORD=${{ secrets.DB_PASSWORD }},
            PASSPORT_PRIVATE_KEY=${{ secrets.PASSPORT_PRIVATE_KEY }},
            PASSPORT_PUBLIC_KEY=${{ secrets.PASSPORT_PUBLIC_KEY }},
            TOKEN_SECRET=becas-be-desarrollo
            FRESH_INSTALL=${{ secrets.FRESH_INSTALL }},,
            GOOGLE_CLOUD_PROJECT_ID=${{ secrets.GCP_PROJECT }},
            GOOGLE_CLOUD_STORAGE_BUCKET=${{ secrets.GCP_BUCKET }}

      # Example of using the output
      - id: test
        run: curl "${{ steps.deploy.outputs.url }}"
